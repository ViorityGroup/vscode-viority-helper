{

	// ScriptLock Snippets
	"Scriptlock example": {
		"scope": "lua",
		"prefix": "ViorityHelper.ScriptLock.example",
		"body": [
			"-- Auth Variable",
			"local auth = false;",
			"",
			"-- Make an request to the API",
			"PerformHttpRequest(\"https://script.viority.eu/api/auth\", function(err, text, headers)",
			"",
			"    print(text) -- Print the row response from API in the console",
			"",
			"    local answer = json.decode(text)",
			"    local name = answer.name",
			"",
			"    -- If the Auth was successfull",
			"    if (name == \"SUCCESSFUL_AUTHENTIFICATION\") then",
			"        auth = true; -- Change the Auth Variable to true",
			"        print(answer.message) -- Print the message from the API in the console",
			"",
			"    -- If the Auth was denied",
			"    elseif (name == \"UNAUTHORIZED_AUTHENTIFICATION\") then",
			"        print(answer.message) -- Print the message from the API in the console",
			"        print(\"Your IPv4: \" .. answer.IPv4) -- Print your IPv4 Address",
			"    end",
			"",
			"end, 'POST', nil , {['customer_id'] = '${1:Viority_Customer_XXX}' , ['script_id'] = '${2:Viority_Script_XXX}'})"
		],
		"description": "ðŸ“– ScriptLock Example",
	},

	// #region Viority Menu V2
	"Viority Menu V2 notifyboard": {
		"scope": "lua",
		"prefix": "ViorityHelper.MenuV2.notifyboard",
		"body": [
			"TriggerServerEvent('viority_menu:server:UpdateNotifyBoard', '${1:header}', '${2:message}', os.date('%d.%m.%Y %H:%M'), '${3:identifier}')",
		],
		"description": "ðŸ“– Add Entry to NotifyBoard",
	},

	"Viority Menu V2 openmenu": {
		"scope": "lua",
		"prefix": "ViorityHelper.MenuV2.openmenu",
		"body": [
			"RegisterNetEvent('viority_menu:client:OpenMenu')",
			"AddEventHandler('viority_menu:client:OpenMenu', function()",
			"    -- Deactivate Hud",
			"end)"
		],
		"description": "ðŸ“– OpenMenu Event (only client)",
	},

	"Viority Menu V2 closemenu": {
		"scope": "lua",
		"prefix": "ViorityHelper.MenuV2.closemenu",
		"body": [
			"RegisterNetEvent('viority_menu:client:CloseMenu')",
			"AddEventHandler('viority_menu:client:CloseMenu', function()",
			"    -- Activate Hud Back",
			"end)"
		],
		"description": "ðŸ“– CloseMenu Event (only client)",
	},

	"Viority Menu V2 updatechallengeprogress": {
		"scope": "lua",
		"prefix": "ViorityHelper.MenuV2.updatechallengeprogress",
		"body": [
			"TriggerServerEvent('viority_menu:server:UpdateChallengeProgress', '${1:target}', '${2:id}', '${3:type}', ${4:task}, ${5:progress})",
		],
		"description": "ðŸ“– Update any Challenge Progress",
	},

	"Viority Menu V2 updateachievementprogress": {
		"scope": "lua",
		"prefix": "ViorityHelper.MenuV2.updateachievementprogress",
		"body": [
			"TriggerServerEvent('viority_menu:server:UpdateAchievementProgress', '${1:target}', '${2:id}', '${3:task}', '${4:progress}')",
		],
		"description": "ðŸ“– Update any Achievement Progress",
	},

	"Viority Menu V2 checkachievementprogress": {
		"scope": "lua",
		"prefix": "ViorityHelper.MenuV2.checkachievementprogress",
		"body": [
			"ESX.TriggerServerCallback('viority_menu:server:CheckAchievementProgress', function(response)",
			"    print(response) --> Example: 23.33",
			"end, {id = '${1:ID}'})"
		],
		"description": "ðŸ“– Check any Achievement Progress (client)",
	},

	"Viority Menu V2 checkcurrentlevel": {
		"scope": "lua",
		"prefix": "ViorityHelper.MenuV2.checkcurrentlevel",
		"body": [
			"ESX.TriggerServerCallback('viority_menu:server:CheckCurrentLevel', function(response)",
			"    print(response.allxp) --> Example: 1875",
			"    print(response.xp) --> Example: 15",
			"    print(response.level) --> Example: 12.06",
			"end, {})"
		],
		"description": "ðŸ“– Check current level (client)",
	},
	// #endregion Viority Menu V2

	// #region Viority Garage V2
	"Viority Garage V2 opengarage": {
		"scope": "lua",
		"prefix": "ViorityHelper.GarageV2.opengarage",
		"body": [
			"RegisterNetEvent('viority_garage:client:OpenMenu')",
			"AddEventHandler('viority_garage:client:OpenMenu', function()",
			"    -- Deactivate Hud",
			"end)"
		],
		"description": "ðŸ“– OpenGarage Event (only client)",
	},

	"Viority Garage V2 closegarage": {
		"scope": "lua",
		"prefix": "ViorityHelper.GarageV2.closegarage",
		"body": [
			"RegisterNetEvent('viority_garage:client:OpenGarage')",
			"AddEventHandler('viority_garage:client:OpenGarage', function()",
			"    -- Activate Hud Back",
			"end)"
		],
		"description": "ðŸ“– CloseGarage Event (only client)",
	},

	"Viority Garage V2 parkinvehicle": {
		"scope": "lua",
		"prefix": "ViorityHelper.GarageV2.parkinvehicle",
		"body": [
			"TriggerServerEvent('viority_garage:server:parkinvehicle', 'SecurityToken' --[[More Information: https://docs.viority.eu/tutorials/product/how-to-use-the-event-whitelist]], '${1:plate}', '${2:fuel}', '${3:health}')",
		],
		"description": "ðŸ“– Register the ParkIn",
	},
	// #endregion Viority Garage V2

	// #region Viority Cardealer
	"Viority Cardealer checkplate": {
		"scope": "lua",
		"prefix": "ViorityHelper.Cardealer.checkplate",
		"body": [
			"exports['viority_cardealer']:CheckPlate('${1:Plate}')"
		],
		"description": "ðŸ“– CheckPlate Function"
	},
	
	"Viority Cardealer checkplateblacklist": {
		"scope": "lua",
		"prefix": "ViorityHelper.Cardealer.checkplateblacklist",
		"body": [
			"exports['viority_cardealer']:CheckPlateBlacklist('${1:Plate}')"
		],
		"description": "ðŸ“– CheckPlateBlacklist Function"
	},
	
	"Viority Cardealer opencardealer": {
		"scope": "lua",
		"prefix": "ViorityHelper.Cardealer.opencardealer",
		"body": [
			"RegisterNetEvent('viority_cardealer:client:OpenCardealer')",
			"AddEventHandler('viority_cardealer:client:OpenCardealer', function()",
			"    -- Deactivate Hud",
			"end)"
		],
		"description": "ðŸ“– OpenCardealer Event (only client)"
	},

	"Viority Cardealer closecardealer": {
		"scope": "lua",
		"prefix": "ViorityHelper.Cardealer.closecardealer",
		"body": [
			"RegisterNetEvent('viority_cardealer:client:CloseCardealer')",
			"AddEventHandler('viority_cardealer:client:CloseCardealer', function()",
			"    -- Activate Hud Back",
			"end)"
		],
		"description": "ðŸ“– CloseCardealer Event (only client)"
	},
	
	"Viority Cardealer generateplate": {
		"scope": "lua",
		"prefix": "ViorityHelper.Cardealer.generateplate",
		"body": [
			"exports['viority_cardealer']:GeneratePlate(${1:Length})"
		],
		"description": "ðŸ“– GeneratePlate Function"
	},

	"Viority Cardealer updatevipleasing": {
		"scope": "lua",
		"prefix": "ViorityHelper.Cardealer.updatevipleasing",
		"body": [
			"TriggerServerEvent('viority_cardealer:server:UpdateVIPLeasing', 'SecurityToken' --[[More Information: https://docs.viority.eu/tutorials/product/how-to-use-the-event-whitelist]], '${2:Target}', ${3:Bool})"
		],
		"description": "ðŸ“– Update the VIP Leasing"
	},
	// #endregion Viority Cardealer

	// #region Viority Gasoline
	"Viority Gasoline opengasoline": {
		"scope": "lua",
		"prefix": "ViorityHelper.Gasoline.OpenGasolineEvent",
		"body": [
			"RegisterNetEvent('viority_gasoline:client:OpenGasoline')",
			"AddEventHandler('viority_gasoline:client:OpenGasoline', function()",
			"    -- Deactivate Hud",
			"end)"
		],
		"description": "ðŸ“– OpenGasoline Event (only client)"
	},

	"Viority Gasoline closegasoline": {
		"scope": "lua",
		"prefix": "ViorityHelper.Gasoline.closegasoline",
		"body": [
			"RegisterNetEvent('viority_gasoline:client:CloseGasoline')",
			"AddEventHandler('viority_gasoline:client:CloseGasoline', function()",
			"    -- Activate Hud Back",
			"end)"
		],
		"description": "ðŸ“– CloseGasoline Event (only client)"
	},

	"Viority Gasoline getfuel": {
		"scope": "lua",
		"prefix": "ViorityHelper.Gasoline.getfuel",
		"body": [
			"exports['viority_gasoline']:GetFuel(${1:vehicle})"
		],
		"description": "ðŸ“– GetFuel Function"
	},

	"Viority Gasoline refillfuelstock": {
		"scope": "lua",
		"prefix": "ViorityHelper.Gasoline.refillfuelstock",
		"body": [
			"exports['viority_gasoline']:RefillFuelStock('${1:GasolineID}', '${2:FuelType}', ${3:FuelStock})"
		],
		"description": "ðŸ“– RefillFuelStock Function"
	},

	"Viority Gasoline setfuel": {
		"scope": "lua",
		"prefix": "ViorityHelper.Gasoline.setfuel",
		"body": [
			"exports['viority_gasoline']:SetFuel(${1:vehicle}, ${2:amount})"
		],
		"description": "ðŸ“– SetFuel Function"
	},
	// #endregion Viority Gasoline

	// #region Viority Billingmenu
	"Viority Billingmenu closemenu": {
		"scope": "lua",
		"prefix": "ViorityHelper.Billingmenu.closemenu",
		"body": [
			"RegisterNetEvent('viority_billingmenu:client:CloseMenu')",
			"AddEventHandler('viority_billingmenu:client:CloseMenu', function()",
			"    -- Activate Hud Back",
			"end)"
		],
		"description": "ðŸ“– CloseBillingMenu Event (only client)"
	},

	"Viority Billingmenu openmenu": {
		"scope": "lua",
		"prefix": "ViorityHelper.Billingmenu.openmenu",
		"body": [
			"RegisterNetEvent('viority_billingmenu:client:OpenMenu')",
			"AddEventHandler('viority_billingmenu:client:OpenMenu', function()",
			"    -- Deactivate Hud",
			"end)"
		],
		"description": "ðŸ“– OpenBillingMenu Event (only client)"
	},
	// #endregion Viority Billingmenu

	// #region Viority Marry
	"Viority Marry startanimation": {
		"scope": "lua",
		"prefix": "ViorityHelper.Marry.startanimation",
		"body": [
			"RegisterNetEvent('viority_marry:client:StartAnimation')",
			"AddEventHandler('viority_marry:client:StartAnimation', function()",
			"    -- Deactivate Hud",
			"end)"
		],
		"description": "ðŸ“– StartAnimation Event (only client)"
	},

	"Viority Marry stopanimation": {
		"scope": "lua",
		"prefix": "ViorityHelper.Marry.stopanimation",
		"body": [
			"RegisterNetEvent('viority_marry:client:StopAnimation')",
			"AddEventHandler('viority_marry:client:StopAnimation', function()",
			"    -- Activate Hud Back",
			"end)"
		],
		"description": "ðŸ“– StopAnimation Event (only client)"
	},
	// #endregion Viority Marry

	// #region Viority HUD
	"Viority HUD notify predefined": {
		"scope": "lua",
		"prefix": "ViorityHelper.HUD.notify.predefined",
		"body": [
			"TriggerEvent('viority_hud:client:Notify', ${1|1,2|}, 1, '${2:SERVER RESTART}', '${3:The server will be restarted in 5 minutes!}')"
		],
		"description": "ðŸ“– Predefined Notify"
	},

	"Viority HUD notify manually": {
		"scope": "lua",
		"prefix": "ViorityHelper.HUD.notify.manually",
		"body": [
			"TriggerEvent('viority_hud:client:Notify', ${1|1,2|}, nil, '${2:SERVER RESTART}', '${3:The server will be restarted in 5 minutes!}', '${4:https://example.com/Icon.png}', '${5:#0071f3}', ${6:true}, ${7:5000})"
		],
		"description": "ðŸ“– Manually Notify"
	},

	"Viority HUD getwantedstars": {
		"scope": "lua",
		"prefix": "ViorityHelper.HUD.getwantedstars",
		"body": [
			"ESX.TriggerServerCallback('viority_hud:server:GetWantedStars', function(response)",
			"    print(response)",
			"end, {identifier = '${1:identifier}'})"
		],
		"description": "ðŸ“– GetWantedStars Function"
	},

	"Viority HUD updatecurrentmission": {
		"scope": "lua",
		"prefix": "ViorityHelper.HUD.updatecurrentmission",
		"body": [
			"TriggerEvent('viority_hud:client:UpdateCurrentMission', 'SecurityToken' --[[More Information: https://docs.viority.eu/tutorials/product/how-to-use-the-event-whitelist]], '${1:drive_meeting_point}', ${2:true}, ${3:true}, '${4:Drive to the meeting point}')"
		],
		"description": "ðŸ“– UpdateCurrentMission Function"
	},

	"Viority HUD updatetransactiondata": {
		"scope": "lua",
		"prefix": "ViorityHelper.HUD.updatetransactiondata",
		"body": [
			"TriggerEvent('viority_hud:client:UpdateTransactionData', 'SecurityToken' --[[More Information: https://docs.viority.eu/tutorials/product/how-to-use-the-event-whitelist]], '${1:money}', ${2:false}, ${3:25000})"
		],
		"description": "ðŸ“– UpdateTransactionData Function"
	},

	"Viority HUD updatewantedstars": {
		"scope": "lua",
		"prefix": "ViorityHelper.HUD.updatewantedstars",
		"body": [
			"TriggerEvent('viority_hud:client:UpdateWantedStars', ${1:amount})"
		],
		"description": "ðŸ“– UpdateWantedStars Function"
	},
	// #endregion Viority HUD

	// #region Viority Playtimereward
	"Viority PlaytimeReward checkcurrentlevel": {
		"scope": "lua",
		"prefix": "ViorityHelper.PlaytimeReward.checkcurrentlevel",
		"body": [
			"ESX.TriggerServerCallback('viority_playtimereward:server:CheckCurrentLevel', function(response)",
			"    print(response.level) --> Example: 5",
			"end, {id = ${1:GetPlayerServerId(PlayerId())}}) -- For Own Level"
		],
		"description": "ðŸ“– CheckCurrentLevel Function"
	},

	"Viority PlaytimeReward closeplaytimereward": {
		"scope": "lua",
		"prefix": "ViorityHelper.PlaytimeReward.closeplaytimereward",
		"body": [
			"TriggerEvent('viority_playtimereward:client:ClosePlaytimeReward')"
		],
		"description": "ðŸ“– ClosePlaytimeReward Function"
	},

	"Viority PlaytimeReward openplaytimereward": {
		"scope": "lua",
		"prefix": "ViorityHelper.PlaytimeReward.openplaytimereward",
		"body": [
			"TriggerEvent('viority_playtimereward:client:OpenPlaytimeReward')"
		],
		"description": "ðŸ“– OpenPlaytimeReward Function"
	},
	// #endregion Viority Playtimereward

	// #region Viority Register
	"Viority Register getallpromocodes": {
		"scope": "lua",
		"prefix": "ViorityHelper.Register.getallpromocodes",
		"body": [
			"ESX.TriggerServerCallback('viority_register:server:getAllPromocodes', function(response)",
			"    for k,v in pairs(response) do",
			"        print(k) --> Promocode Name e.g. test1234",
			"        print(v.owner) --> Owner e.g. Alessio Martini",
			"    end;",
			"end, {})"
		],
		"description": "ðŸ“– getAllPromocodes Function"
	},

	"Viority Register getplayerpromocode": {
		"scope": "lua",
		"prefix": "ViorityHelper.Register.getplayerpromocode",
		"body": [
			"ESX.TriggerServerCallback('viority_register:server:getPlayerPromocode', function(code)",
			"   print(('Your Promocode is %s'):format(code));",
			"end, {});"
		],
		"description": "ðŸ“– getPlayerPromocode Function"
	},
	// #endregion Viority Register

	// #region Viority Interaction
	"Viority Interaction usage": {
		"scope": "lua",
		"prefix": "ViorityHelper.Interaction.usage",
		"body": [
			"exports['viority_interaction']:Interaction('${1:E}', '${2:PRESS} {y1}E{y2} ${3:TO INTERACT}', ${4:false}, ${5:true}, '${6:#2A7EE2}')"
		],
		"description": "ðŸ“– Usage for Interaction"
	},
	// #endregion Viority Interaction

	// #region Viority SupportID
	"Viority SupportID getNearestPlayerID": {
		"scope": "lua",
		"prefix": "ViorityHelper.SupportID.getnearestplayerid",
		"body": [
			"exports['viority_supportid']:getNearestPlayerID() --> Returns the SupportID of the nearest player!"
		],
		"description": "ðŸ“– getNearestPlayerID Function"
	},

	"Viority SupportID getPlayerID": {
		"scope": "lua",
		"prefix": "ViorityHelper.SupportID.getplayerid",
		"body": [
			"exports['viority_supportid']:getPlayerID() --> Returns the SupportID as INT!"
		],
		"description": "ðŸ“– getPlayerID Function"
	}
	// #endregion Viority SupportID

}